{"version":3,"file":"static/js/779.5d98798d.chunk.js","mappings":"+SAEMA,EAAM,mCAIL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qGACkBC,EAAAA,EAAAA,GAAM,mBAAoB,CAC/CC,OAAQ,CAAEC,QAASJ,KAFhB,cACCK,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,wFACkBN,EAAAA,EAAAA,GAAM,eAAgB,CAC3CC,OAAQ,CAAEC,QAASJ,EAAKQ,MAAAA,KAFrB,cACCH,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,wFACkBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,GAAM,CAC1CP,OAAQ,CAAEC,QAASJ,KAFhB,cACCK,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,wFACkBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,EAAV,YAAwB,CAClDP,OAAQ,CAAEC,QAASJ,KAFhB,cACCK,EADD,yBAIEA,EAASC,KAAKM,MAJhB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,wFACkBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,EAAV,YAAwB,CAClDP,OAAQ,CAAEC,QAASJ,KAFhB,cACCK,EADD,yBAIEA,EAASC,KAAKQ,SAJhB,kEA9BPZ,EAAAA,EAAAA,SAAAA,QADiB,+B,2KCDJa,EAAUC,EAAAA,GAAAA,IAAH,sBACPC,EAAcD,EAAAA,GAAAA,GAAH,+FAKXE,EAAcF,EAAAA,GAAAA,GAAH,yKASXG,EAAeH,EAAAA,GAAAA,GAAH,gEAIZI,EAAcJ,EAAAA,GAAAA,EAAH,sB,SCRT,SAASK,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIH,GAAa,GAFjB,UAG2Bb,EAAAA,EAAAA,IAAgBc,GAH3C,OAGUtB,EAHV,OAIImB,EAAWnB,GAJf,yEAMWyB,MAAM,4BANjB,yBAQIJ,GAAa,GARjB,6EADc,uBAAC,WAAD,wBAYdK,EACD,GAAE,CAACJ,KAGF,+BACE,UAACZ,EAAD,WACGU,IAAa,SAACO,EAAA,EAAD,IACbT,GACC,SAACN,EAAD,UACGM,EAAQU,KAAI,YAA8B,IAA3BvB,EAA0B,EAA1BA,GAAIwB,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,UAACjB,EAAD,YACE,SAACC,EAAD,UAAee,KACf,SAACd,EAAD,UAAce,MAFEzB,EAKrB,OAGH,SAACU,EAAD,4DAKT,C","sources":["Services/ApiMovies.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '31cfad655ad65f43227562d8d472bc2d';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\naxios.defaults.baseURL = BASE_URL;\n\nexport async function getTrending() {\n  const response = await axios('trending/all/day', {\n    params: { api_key: KEY },\n  });\n  return response.data;\n}\n\nexport async function searchMovies(query) {\n  const response = await axios('search/movie', {\n    params: { api_key: KEY, query },\n  });\n  return response.data;\n}\n\nexport async function getMovieDetails(id) {\n  const response = await axios(`movie/${id}`, {\n    params: { api_key: KEY },\n  });\n  return response.data;\n}\n\nexport async function getMovieCredits(id) {\n  const response = await axios(`movie/${id}/credits`, {\n    params: { api_key: KEY },\n  });\n  return response.data.cast;\n}\n\nexport async function getMovieReviews(id) {\n  const response = await axios(`movie/${id}/reviews`, {\n    params: { api_key: KEY },\n  });\n  return response.data.results;\n}\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div``;\nexport const ListReviews = styled.ul`\n  display: block;\n  justify-content: center;\n  align-items: center;\n`;\nexport const ItemReviews = styled.li`\n  display: block;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  margin-bottom: 20px;\n  padding: 5px;\n`;\nexport const TitleReviews = styled.h3`\n  color: black;\n  text-align: center;\n`;\nexport const TextReviews = styled.p``;\n","import Loader from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { getMovieReviews } from 'Services/ApiMovies';\nimport {\n  ItemReviews,\n  ListReviews,\n  TitleReviews,\n  TextReviews,\n  Wrapper,\n} from './Reviews.styled';\nimport PropTypes from 'prop-types';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchReviews() {\n      try {\n        setIsLoading(true);\n        const response = await getMovieReviews(movieId);\n        setReviews(response);\n      } catch (error) {\n        return alert(`Sorry, please try again`);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      <Wrapper>\n        {isLoading && <Loader />}\n        {reviews ? (\n          <ListReviews>\n            {reviews.map(({ id, author, content }) => {\n              return (\n                <ItemReviews key={id}>\n                  <TitleReviews>{author}</TitleReviews>\n                  <TextReviews>{content}</TextReviews>\n                </ItemReviews>\n              );\n            })}\n          </ListReviews>\n        ) : (\n          <TextReviews>We don't have any reviews fot this movie.</TextReviews>\n        )}\n      </Wrapper>\n    </>\n  );\n}\n\nReviews.propTypes = {\n  author: PropTypes.string,\n  content: PropTypes.string,\n  id: PropTypes.number,\n};\n"],"names":["KEY","getTrending","axios","params","api_key","response","data","searchMovies","query","getMovieDetails","id","getMovieCredits","cast","getMovieReviews","results","Wrapper","styled","ListReviews","ItemReviews","TitleReviews","TextReviews","Reviews","useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","useEffect","alert","fetchReviews","Loader","map","author","content"],"sourceRoot":""}