{"version":3,"file":"static/js/387.2b837d87.chunk.js","mappings":"uRAEMA,EAAM,mCAIL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qGACkBC,EAAAA,EAAAA,GAAM,mBAAoB,CAC/CC,OAAQ,CAAEC,QAASJ,KAFhB,cACCK,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,wFACkBN,EAAAA,EAAAA,GAAM,eAAgB,CAC3CC,OAAQ,CAAEC,QAASJ,EAAKQ,MAAAA,KAFrB,cACCH,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,wFACkBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,GAAM,CAC1CP,OAAQ,CAAEC,QAASJ,KAFhB,cACCK,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,wFACkBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,EAAV,YAAwB,CAClDP,OAAQ,CAAEC,QAASJ,KAFhB,cACCK,EADD,yBAIEA,EAASC,KAAKM,MAJhB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,wFACkBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,EAAV,YAAwB,CAClDP,OAAQ,CAAEC,QAASJ,KAFhB,cACCK,EADD,yBAIEA,EAASC,KAAKQ,SAJhB,kEA9BPZ,EAAAA,EAAAA,SAAAA,QADiB,+B,2KCDJa,EAAUC,EAAAA,GAAAA,IAAH,sBACPC,EAAWD,EAAAA,GAAAA,GAAH,kHAMRE,EAAWF,EAAAA,GAAAA,GAAH,kMAURG,EAAYH,EAAAA,GAAAA,IAAH,+CAGTI,EAAWJ,EAAAA,GAAAA,EAAH,gE,SCTN,SAASK,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIH,GAAa,GAFjB,UAG2Bf,EAAAA,EAAAA,IAAgBgB,GAH3C,OAGUtB,EAHV,OAIImB,EAAUnB,GAJd,yEAMWyB,MAAM,4BANjB,yBAQIJ,GAAa,GARjB,6EADc,uBAAC,WAAD,wBAYdK,EACD,GAAE,CAACJ,IAGJ,OACE,+BACE,UAACZ,EAAD,WACGU,IAAa,SAACO,EAAA,EAAD,IACbT,GACC,SAACN,EAAD,UACGM,EAAOU,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,aAAcxB,EAA0B,EAA1BA,GAAIyB,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACrC,OACE,UAAClB,EAAD,YACE,SAACC,EAAD,CACEkB,IACEH,EAAY,UAbhB,mCAagB,OACQA,GAChB,iIAENI,IAAKH,KAEP,SAACf,EAAD,UAAWe,KACX,UAACf,EAAD,yBAAsBgB,OAVT1B,EAalB,OAGH,SAACU,EAAD,yDAKT,C","sources":["Services/ApiMovies.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '31cfad655ad65f43227562d8d472bc2d';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\naxios.defaults.baseURL = BASE_URL;\n\nexport async function getTrending() {\n  const response = await axios('trending/all/day', {\n    params: { api_key: KEY },\n  });\n  return response.data;\n}\n\nexport async function searchMovies(query) {\n  const response = await axios('search/movie', {\n    params: { api_key: KEY, query },\n  });\n  return response.data;\n}\n\nexport async function getMovieDetails(id) {\n  const response = await axios(`movie/${id}`, {\n    params: { api_key: KEY },\n  });\n  return response.data;\n}\n\nexport async function getMovieCredits(id) {\n  const response = await axios(`movie/${id}/credits`, {\n    params: { api_key: KEY },\n  });\n  return response.data.cast;\n}\n\nexport async function getMovieReviews(id) {\n  const response = await axios(`movie/${id}/reviews`, {\n    params: { api_key: KEY },\n  });\n  return response.data.results;\n}\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div``;\nexport const ListCast = styled.ul`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\nexport const ItemCast = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 25%;\n  height: 100%;\n  margin-bottom: 20px;\n  padding: 5px;\n`;\nexport const ImageCast = styled.img`\n  border-radius: 5px;\n`;\nexport const TextCast = styled.p`\n  color: white;\n  text-align: center;\n`;\n","import Loader from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { getMovieCredits } from 'Services/ApiMovies';\nimport {\n  ImageCast,\n  ItemCast,\n  ListCast,\n  TextCast,\n  Wrapper,\n} from './Cast.styled';\nimport PropTypes from 'prop-types';\n\nexport default function Cast() {\n  const [actors, setActors] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchCast() {\n      try {\n        setIsLoading(true);\n        const response = await getMovieCredits(movieId);\n        setActors(response);\n      } catch (error) {\n        return alert(`Sorry, please try again`);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchCast();\n  }, [movieId]);\n  const actorPhoto = `https://image.tmdb.org/t/p/w200`;\n\n  return (\n    <>\n      <Wrapper>\n        {isLoading && <Loader />}\n        {actors ? (\n          <ListCast>\n            {actors.map(({ profile_path, id, name, character }) => {\n              return (\n                <ItemCast key={id}>\n                  <ImageCast\n                    src={\n                      profile_path\n                        ? `${actorPhoto}${profile_path}`\n                        : 'https://static.displate.com/857x1200/displate/2022-04-15/7422bfe15b3ea7b5933dffd896e9c7f9_46003a1b7353dc7b5a02949bd074432a.jpg'\n                    }\n                    alt={name}\n                  />\n                  <TextCast>{name}</TextCast>\n                  <TextCast>Character: {character}</TextCast>\n                </ItemCast>\n              );\n            })}\n          </ListCast>\n        ) : (\n          <TextCast>We don't have any cast fot this movie.</TextCast>\n        )}\n      </Wrapper>\n    </>\n  );\n}\n\nCast.propTypes = {\n  profile_path: PropTypes.string,\n  name: PropTypes.string,\n  character: PropTypes.string,\n  id: PropTypes.number,\n};\n"],"names":["KEY","getTrending","axios","params","api_key","response","data","searchMovies","query","getMovieDetails","id","getMovieCredits","cast","getMovieReviews","results","Wrapper","styled","ListCast","ItemCast","ImageCast","TextCast","Cast","useState","actors","setActors","isLoading","setIsLoading","movieId","useParams","useEffect","alert","fetchCast","Loader","map","profile_path","name","character","src","alt"],"sourceRoot":""}